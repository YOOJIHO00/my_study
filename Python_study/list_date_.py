
# 리스트(list) 자료형 파이썬에서 정해놓은 언어니까 변수로 사용하면 안된다.
# 여러개의 값을 변수 1개에 저장
# [1, 2, 3, 4, 5, 6, 7, 8, 9]
# [1, 1, 1, 1, 1,]
# # 똑같은 숫자 여러개도 넣을 수 있고, 다른 숫자 여러개를 넣을 수도 있음.
# ["Hello", "Woeld", "Python"]
# [1, "Hello", 2, "WOW"]
# [1, 2 ["Hello","Woeld"]]
# []
# 숫자 말고 문자도 넣을 수 있다.
# 아무것도 안넣을수도 있다.
# 리스트 안에 리스트를 넣을 수 있고, 문자와 숫자를 같이 넣을수도 있다.
# 마음대로 넣을 수 있다. 나중에 추가도 가능하다.
# 파이썬이 알아서 메모리에 리스트 자리를 만들어준다.
# [] 대괄호 자체를 리스트라고 부른다 
# 안에 있는 걸 엘레멘트..? 라고 부르고 엘레멘트 자료형이라고 한다.
# 리스트안에서 인덱싱 슬라이싱 할 수 있다.
# li_1 = [1, 2, 3]

# print(li_1[0])
# print(li_1[1])
# print(li_1[2])
# print(li_1[-1])

# print(li_1[0 + li_1[1]])
# li_2 = [1, 2, 3, [4, 5, 6]]
# 위 경우 원소가 4개임 1, 2, 3, 과[4, 5, 6] 이라는 리스트 하나
# print(li_2[3])
# 위()안에 있는 숫자는 [4, 5, 6] 이 들어있는 리스트를 말함
# print(li_2[3][0])
# 답이 4가 나오게 된다. 위 리스트에 있는 0번 인덱스를 말하기 때문이다
# [[1, 2, 3], 
# [4, 5, 6], 
# [7, 8, 9]]
# 위에 행열이 2차원 리스트 
# 차원이 늘어날 때 마다 괄호를 더해 리스트를 겹겹이 쌓아준다

# print(li_2[3][0])
# print(li_2[2:3])
# print(li_2[1:])
# print(li_2[:2])
# print(li_2[3][0:2])
# print(li_2[0:1])
# print(li_2[0])

# li_3 = [1, 2, 3, 4, 5]
# # 출력 결과가 [2, 3] 이 되도록 만드세요
# print(li_3[1:3])
# # 인덱스의 위치 잘 기억하기 (맨 앞 숫자의 앞자리가 0번임 0번부터 세어야 함)

# # print(li_3[100])
# # 100개가 안되니까 에러가 난다 길이 체크 해줘야 함
# print(len(li_3))
# # 위에가 길이 체크 함수
 
# # [10, 2, 3, 4, 5]
# li_3[0] = 10
# print(li_3)

# 추가하는 함수
# append() 
# 리스트의 마지막에 원소를 추가
# li_4 = [1, 2, 3]
# li_4.append(4)
# # 리스트 4번에 추가라는 뜻
# li_4.append("문자")
# li_4.append([1, 2, 3])
# print(li_4)

# insert(인덱스, 원소)
#  인덱스 위치에 원소 삽입
# li = [1, 2, 3]
# li.insert(1, 10)
# print(li)
# # 1, 10, 2, 3 으로 결과가 출력

# # remove (값)
# # 리스트에서 함수에 입력된 값과 같은 값을 찾아 삭제함
# li = [1, 2, 3]
# li.remove(2)
# print(li)
# # 1, 3 이 결과로 출력 (2가 삭제되었음)
# li = [1, 2, 3, 2]
# li.remove(2)
# print(li)
# 1, 3, 2 로 결과가 출력 
# 만약 같은 2가 두개 였다면 가장 앞에 있는 2만 삭제되고 뒤에 있는 2는 남는다. 
# remove 안에 내가 삭제하고 싶은 숫자가 있는지 체크
# 없는 걸 입력하면 에러가 난다.

# pop (인덱스)
# 리스트의 인덱스 위치의 요소를 꺼낸다.
# 인덱스를 함수에 전달하지 않으면 제일 마지막 요소를 꺼낸다.
# li = [1, 2, 3, 4]
# a = li.pop()
# li.pop()
# print(li)  #[1, 2, 3]
# print(a)  #4
# b = li.pop(1)
# print(li)  #[1, 3]
# print(b)  # 2
# 리스트 안에 있는것을 꺼내고 삭제한다.

#  index (값)
# 리스트에서 값을 찾아 그 값의 인덱스를 돌려준다.
# li = [1, 2, 3]
# idx = li.index(2)   # 1
# print(idx)
# li[2] ---> 인덱싱(인덱스로 값에 접근)
# li.index(값) ---> 인덱스 알아내기
# 돌려준다 라는 말은 return 의 개념
# 인덱스 함수도 마찬가지로 값이 리스트에 없으면 에러가 난다.
# 값을 찾을 때 (위치를 찾을 때) 사용

# sort() 
# 정렬이라는 뜻. 리스트의 요소를 정렬한다.
# li = [5, 3, 1, 4, 2]
# li.sort()
# print(li) # [1, 2, 3, 4, 5[ 로 정렬되어 출력 (오름차순)
# li.sort(reverse = True) # [5, 4, 3, 2, 1] 로 정렬되어 출력 (내림차순)
# # reverse 는 뒤집다

# reverse()
# 리스트의 순서를 뒤집는 함수
# 정렬 아님
# li = [5, 1, 4, 3, 2]
# li.reverse()
# print(li)   #[2, 4, 3, 1, 5] 로 출력
# 순서만 거꾸로 나오고 정렬되지 않는다. 

# count(값)
# 리스트 안에서 해당 값이 몇 개 있는지 세는 함수
li = [1, 2, 3, 2]
cnt = li.count(2)
print(cnt)   #2로 결과가 출력
# 리스트에 해당 숫자가 있는지 확인 할 때 유용하다.
# 없는 값을 입력하면 에러 대신에 0 이라는 결과가 나온다.

# + 연산자
# extend 함수와 같다
# 리스트를 연결한다.
li_1 = [1, 2, 3]
li_2 = [4, 5, 6]
print(li_1 + li_2)  # [1, 2, 3, 4, 5, 6]
li_1.extend(li_2)
# 리스트 숫자끼리 덧셈 되는게 아니라 합쳐준다.
# 더하기의 의미 아님

# * 연산자
# 리스트를 반복한다
# 리스트끼리 곱하는게 아니라 반복된다.
# 곱하기의 의미 아님

li = [1, 2, 3]
print(li * 3)   #[1, 2, 3, 1, 2, 3, 1, 2, 3] 이렇게 세번 반복되어 결과가 출력