# tuple(튜플)형
# 튜플은 element의 값을 수정할 수 없다.
# mutable(변하는, 변하기 쉬운) / immutable(불변하는, 변하지 않는)
# mutable은 값을 수정할 수 있음 / immutable은 값을 수정할 수 없음
# mutable(수정가능) : list, dict
# immutable(수정불가능) : int, folat, str, tuple
# my_list = [1, 2, 3]
# my_list[0] = 5  # = 는 할당 연산자 오른쪽에 있는 값을 왼쪽으로 출력
# print(my_list)

# # my_tuple = (1, 2, 3)
# # my_tuple[0] = 5   #Erorr 튜플형은 수정 불가능 , 문자형 숫자형 둘 다 사용가능
# # print(my_tuple)

# tuple_1 = ("Hello", "World", "Python")
# t2 = (1, 2, 3, 4, 5)
# t3 = (1, 2, "Hello")
# t4 =  1, 2 ,3
# t5 = (1, 2(3, 4, 5))

# # 튜플안에 튜플, 문자형 숫자형 다 넣을 수 있다. (이 부분은 리스트와 동일)
# # 안에 있는 값을 삭제 할 수 없다. (수정이 안되기 때문이다.)
# # 결론 : 리스트와 동일하나, 수정이 안된다.
# # 리스트에서는 + 이어 붙이기 * 반복하기
# # 튜플에서도 이어붙이고 반복하지만, 수정이 아니고 값을 새로 만든다.

# t6 = tuple_1 + t2
# t7 = t3 * 3
# t3 = (1, 2, "Hello")
# print(t3[2])
# print(t3[0:2])
# print(len(t3))

# # 슬라이싱 : 껍질을 안까고 가져오게 된다. 
# # (튜플형을 슬라이싱하면 튜플형, 
# # 리스트형을 슬라이싱하면 리스트형을 가져오게 된다.)
# # 슬라이싱을 해서 튜플로 꺼냈다면, 꺼낸것도 수정이 안된다.

# t5 = (1, 2(3, 4, 5))
# print(t5[2][1])

# t8 = (5, 3, 1, 4, 2)
# for i in t8:
#     print(i) 

#  튜플에서는 값이 바뀔 수 없기 때문에 이걸 정렬할 수 없다.
# 순서를 바꾸는 것도 값을 수정하는 것이기 때문이다.  
# 값을 추가하는 것도 안된다. 
# 굳이 추가를 하려면 연산자를 사용하여 새로운 값을 만들어야 한다.
# 리스트, 인덱스, 튜플은 순서가 있는 데이터 
# 그래서 for 문을 돌릴 때 순서대로 꺼낸다.


# 2 ~ 9 사이의 숫자를 입력받아
# 해당하는 단의 구구단을 출력하세요.
# 2 ~ 9 사이의 숫자가 아닌 값이
# 입력된 경우, 잘못 입력되었다고
# 출력하고 다시 입력받으세요.

# n = int(input(" 몇 단?"))
# 2 ~ 9 사이의 값이 아닐 때 True # if n < 2 and n > 10:
# if n < 2 or n > 10:  
#     # 다시 입력받기
#     pass
# #  2 ~ 9 사이의 값일 때 True
# if n >= 2 and n <= 9:
#     pass
# if 2 <= n <= 9:
#     pass
# 위 두개는 같은 결과를 출력하는 코드
# 구구단 출력하는 코드

# 2 <= n <= 9 ----- 2 ~ 9 사이라면 True
# while not 2 <= n <= 9:
#     print("2 ~ 9 사이의 숫자를 입력해주세요.")
#     n = int(input("몇단?"))
# for i in range(1, 10):
# # for i in range(9): 도 정답이 될 수 있다.  
#     # print(n, (1+ i))
#     print(n, "*", i, "=", n*i)

# 정수를 입력받고 
# 그 정수보다 작은 수 중
# 가장 큰 제곱수를
# 출력하세요

# n = int(input("정수 : "))
# i = 1
# while True :
#      # i * i 와 똑같음     
#     if i ** 2 >= n:
#         break
#     answer = i ** 2
#     i += 1
# print(answer)
# 1/2 == 0.5
# 4 ** 1/2 == 2 == 4 ** 0.5

# [1, 2, 3, 4, 5]
# [10, 20, 30, 40, 50]
# [532, 5941, 54682, 58, 5]
# 3개의 리스트에서 같은 인덱스의
# 값끼리 더하려 출력하세요.

# li_1 = [1, 2, 3, 4, 5]
# li_2 = [10, 20, 30, 40, 50]
# li_3 = [532, 5941, 54682, 58, 5]
# # for i in range(5):
# #     print(li_1[i] + li_2[i] + li_3[i])

# # # zip() 함수
# # # 길이가 같은 list를 묶어서 for문 등으로 사용가능한
# # # iterable을 반환한다. 
# # for x, y, z in zip(li_1, li_2, li_3):
# #     print(x + y+ z)

# i = 0
# while i < 5:
#      print(li_1[i] + li_2[i] + li_3[i])
#      i += 1 

# # 정수를 입력받고 1부터 입력받은 정수까지 모두 출력하세요.
# 단, 숫자에 3, 6, 9가 들어있는 경우
# 숫자 대신 짝 이라고 출력하세요.

# n = int(input("정수 : "))
# # "3", "6", "9"
# # 931 // 100
# # 931 % 100
# # 31 // 10 == (931 % 100) // 10 
# # 931 = 9 * 10**2 + 3 * 10 ** 1 + 1 * 10 ** 0
# # 931 ---> "931" 
# # str(스트링함수) 로 바꾼것 (그럼 하나씩 빼올 수 있다.)
# for i in range(1, n + 1):
#     # 3, 6, 9 가 들어있으면
#     for j in str(i):
#         if int(j) % 3 == 0 and j != "0":
#             answer = "짝"
#             break
#     print(i)
# # != 같지않다.

# 정수를 입력받고 그 정수의 약수를
# 모두 출력하세요.
# 약수 : 나누었을 때 나머지가 0으로
# 나누어 떨어지게 하는 수

n = int(input("정수:"))
for i in range(1, n + 1):   # 1 ~ n 
    if n % i == 0:
        print(i)
i = 1
while i <= n :
    if n % 1 == 0:
        print(i)
    i += 1
#  위 두 식이 같은 것이다.
